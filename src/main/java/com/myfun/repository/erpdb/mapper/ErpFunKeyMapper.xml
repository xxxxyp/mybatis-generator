<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myfun.repository.erpdb.dao.ErpFunKeyMapper">
  <resultMap id="BaseResultMap" type="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    <id column="KEY_ID" jdbcType="INTEGER" property="keyId" />
    <result column="COMP_ID" jdbcType="INTEGER" property="compId" />
    <result column="CASE_ID" jdbcType="INTEGER" property="caseId" />
    <result column="CASE_TYPE" jdbcType="TINYINT" property="caseType" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
    <result column="TRACK_ID" jdbcType="INTEGER" property="trackId" />
    <result column="KEY_NUM" jdbcType="VARCHAR" property="keyNum" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />
    <result column="CREATOR_TIME" jdbcType="VARCHAR" property="creatorTime" />
    <result column="KEY_STATUS" jdbcType="TINYINT" property="keyStatus" />
    <result column="KEY_LOG_ID" jdbcType="INTEGER" property="keyLogId" />
    <result column="CASE_NO" jdbcType="VARCHAR" property="caseNo" />
    <result column="USEAGE" jdbcType="TINYINT" property="useage" />
    <result column="KEY_DEPT_ID" jdbcType="INTEGER" property="keyDeptId" />
    <result column="LOG_TYPE" jdbcType="INTEGER" property="logType" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="DEL_TIME" jdbcType="TIMESTAMP" property="delTime" />
    <result column="BORROW_KEY_TIME" jdbcType="TIMESTAMP" property="borrowKeyTime" />
    <result column="BORROW_PHONE" jdbcType="VARCHAR" property="borrowPhone" />
    <result column="CURRENT_DEPOSIT" jdbcType="DECIMAL" property="currentDeposit" />
    <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
    <result column="BORROW_USER" jdbcType="VARCHAR" property="borrowUser" />
    <result column="MAX_BORROW_TIME" jdbcType="TIMESTAMP" property="maxBorrowTime" />
    <result column="DEPOSIT_STATUS" jdbcType="INTEGER" property="depositStatus" />
    <result column="BUILD_ID" jdbcType="INTEGER" property="buildId" />
    <result column="KEY_VOUCHER" jdbcType="VARCHAR" property="keyVoucher" />
    <result column="KEY_TYPE" jdbcType="TINYINT" property="keyType" />
    <result column="KEY_COUNT" jdbcType="INTEGER" property="keyCount" />
    <result column="GATHER_TIME" jdbcType="TIMESTAMP" property="gatherTime" />
    <result column="LEND_COUNT" jdbcType="INTEGER" property="lendCount" />
    <result column="KEY_PASSWORD" jdbcType="VARCHAR" property="keyPassword" />
    <result column="AUTO_DELETE" jdbcType="TINYINT" property="autoDelete" />
    <result column="KEY_VIDEO_ADDR" jdbcType="VARCHAR" property="keyVideoAddr" />
    <result column="KEY_VIDEO_PIC_ADDR" jdbcType="VARCHAR" property="keyVideoPicAddr" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbggenerated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbggenerated-->
    KEY_ID, COMP_ID, CASE_ID, CASE_TYPE, DEPT_ID, TRACK_ID, KEY_NUM, USER_ID, CREATOR_TIME,
    KEY_STATUS, KEY_LOG_ID, CASE_NO, USEAGE, KEY_DEPT_ID, LOG_TYPE, UPDATE_TIME, DEL_TIME,
    BORROW_KEY_TIME, BORROW_PHONE, CURRENT_DEPOSIT, USER_NAME, BORROW_USER, MAX_BORROW_TIME,
    DEPOSIT_STATUS, BUILD_ID, KEY_VOUCHER, [KEY_TYPE], KEY_COUNT, GATHER_TIME, LEND_COUNT,
    KEY_PASSWORD, AUTO_DELETE, KEY_VIDEO_ADDR, KEY_VIDEO_PIC_ADDR
  </sql>
  <select id="selectByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunKeyExample" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from FUN_KEY
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbggenerated-->
    select
    <include refid="Base_Column_List" />
    from FUN_KEY
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbggenerated-->
    delete from FUN_KEY
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunKeyExample">
    <!--@mbggenerated-->
    delete from FUN_KEY
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    <selectKey keyProperty="keyId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_KEY_KEY_ID
    </selectKey>
    insert into FUN_KEY (KEY_ID, COMP_ID, CASE_ID,
    CASE_TYPE, DEPT_ID, TRACK_ID,
    KEY_NUM, USER_ID, CREATOR_TIME,
    KEY_STATUS, KEY_LOG_ID, CASE_NO,
    USEAGE, KEY_DEPT_ID, LOG_TYPE,
    UPDATE_TIME, DEL_TIME, BORROW_KEY_TIME,
    BORROW_PHONE, CURRENT_DEPOSIT, USER_NAME,
    BORROW_USER, MAX_BORROW_TIME, DEPOSIT_STATUS,
    BUILD_ID, KEY_VOUCHER, [KEY_TYPE],
    KEY_COUNT, GATHER_TIME, LEND_COUNT,
    KEY_PASSWORD, AUTO_DELETE, KEY_VIDEO_ADDR,
    KEY_VIDEO_PIC_ADDR)
    values (#{keyId,jdbcType=INTEGER}, #{compId,jdbcType=INTEGER}, #{caseId,jdbcType=INTEGER},
    #{caseType,jdbcType=TINYINT}, #{deptId,jdbcType=INTEGER}, #{trackId,jdbcType=INTEGER},
    #{keyNum,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, #{creatorTime,jdbcType=VARCHAR},
    #{keyStatus,jdbcType=TINYINT}, #{keyLogId,jdbcType=INTEGER}, #{caseNo,jdbcType=VARCHAR},
    #{useage,jdbcType=TINYINT}, #{keyDeptId,jdbcType=INTEGER}, #{logType,jdbcType=INTEGER},
    #{updateTime,jdbcType=TIMESTAMP}, #{delTime,jdbcType=TIMESTAMP}, #{borrowKeyTime,jdbcType=TIMESTAMP},
    #{borrowPhone,jdbcType=VARCHAR}, #{currentDeposit,jdbcType=DECIMAL}, #{userName,jdbcType=VARCHAR},
    #{borrowUser,jdbcType=VARCHAR}, #{maxBorrowTime,jdbcType=TIMESTAMP}, #{depositStatus,jdbcType=INTEGER},
    #{buildId,jdbcType=INTEGER}, #{keyVoucher,jdbcType=VARCHAR}, #{keyType,jdbcType=TINYINT},
    #{keyCount,jdbcType=INTEGER}, #{gatherTime,jdbcType=TIMESTAMP}, #{lendCount,jdbcType=INTEGER},
    #{keyPassword,jdbcType=VARCHAR}, #{autoDelete,jdbcType=TINYINT}, #{keyVideoAddr,jdbcType=VARCHAR},
    #{keyVideoPicAddr,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    <selectKey keyProperty="keyId" order="BEFORE" resultType="java.lang.Integer">
      SELECT next value for SEQ_FUN_KEY_KEY_ID
    </selectKey>
    insert into FUN_KEY
    <trim prefix="(" suffix=")" suffixOverrides=",">
      KEY_ID,
      <if test="compId != null">
        COMP_ID,
      </if>
      <if test="caseId != null">
        CASE_ID,
      </if>
      <if test="caseType != null">
        CASE_TYPE,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
      <if test="trackId != null">
        TRACK_ID,
      </if>
      <if test="keyNum != null">
        KEY_NUM,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="creatorTime != null">
        CREATOR_TIME,
      </if>
      <if test="keyStatus != null">
        KEY_STATUS,
      </if>
      <if test="keyLogId != null">
        KEY_LOG_ID,
      </if>
      <if test="caseNo != null">
        CASE_NO,
      </if>
      <if test="useage != null">
        USEAGE,
      </if>
      <if test="keyDeptId != null">
        KEY_DEPT_ID,
      </if>
      <if test="logType != null">
        LOG_TYPE,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="delTime != null">
        DEL_TIME,
      </if>
      <if test="borrowKeyTime != null">
        BORROW_KEY_TIME,
      </if>
      <if test="borrowPhone != null">
        BORROW_PHONE,
      </if>
      <if test="currentDeposit != null">
        CURRENT_DEPOSIT,
      </if>
      <if test="userName != null">
        USER_NAME,
      </if>
      <if test="borrowUser != null">
        BORROW_USER,
      </if>
      <if test="maxBorrowTime != null">
        MAX_BORROW_TIME,
      </if>
      <if test="depositStatus != null">
        DEPOSIT_STATUS,
      </if>
      <if test="buildId != null">
        BUILD_ID,
      </if>
      <if test="keyVoucher != null">
        KEY_VOUCHER,
      </if>
      <if test="keyType != null">
        [KEY_TYPE],
      </if>
      <if test="keyCount != null">
        KEY_COUNT,
      </if>
      <if test="gatherTime != null">
        GATHER_TIME,
      </if>
      <if test="lendCount != null">
        LEND_COUNT,
      </if>
      <if test="keyPassword != null">
        KEY_PASSWORD,
      </if>
      <if test="autoDelete != null">
        AUTO_DELETE,
      </if>
      <if test="keyVideoAddr != null">
        KEY_VIDEO_ADDR,
      </if>
      <if test="keyVideoPicAddr != null">
        KEY_VIDEO_PIC_ADDR,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{keyId,jdbcType=INTEGER},
      <if test="compId != null">
        #{compId,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        #{caseId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        #{caseType,jdbcType=TINYINT},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="trackId != null">
        #{trackId,jdbcType=INTEGER},
      </if>
      <if test="keyNum != null">
        #{keyNum,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="creatorTime != null">
        #{creatorTime,jdbcType=VARCHAR},
      </if>
      <if test="keyStatus != null">
        #{keyStatus,jdbcType=TINYINT},
      </if>
      <if test="keyLogId != null">
        #{keyLogId,jdbcType=INTEGER},
      </if>
      <if test="caseNo != null">
        #{caseNo,jdbcType=VARCHAR},
      </if>
      <if test="useage != null">
        #{useage,jdbcType=TINYINT},
      </if>
      <if test="keyDeptId != null">
        #{keyDeptId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        #{logType,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delTime != null">
        #{delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowKeyTime != null">
        #{borrowKeyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowPhone != null">
        #{borrowPhone,jdbcType=VARCHAR},
      </if>
      <if test="currentDeposit != null">
        #{currentDeposit,jdbcType=DECIMAL},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="borrowUser != null">
        #{borrowUser,jdbcType=VARCHAR},
      </if>
      <if test="maxBorrowTime != null">
        #{maxBorrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="depositStatus != null">
        #{depositStatus,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        #{buildId,jdbcType=INTEGER},
      </if>
      <if test="keyVoucher != null">
        #{keyVoucher,jdbcType=VARCHAR},
      </if>
      <if test="keyType != null">
        #{keyType,jdbcType=TINYINT},
      </if>
      <if test="keyCount != null">
        #{keyCount,jdbcType=INTEGER},
      </if>
      <if test="gatherTime != null">
        #{gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lendCount != null">
        #{lendCount,jdbcType=INTEGER},
      </if>
      <if test="keyPassword != null">
        #{keyPassword,jdbcType=VARCHAR},
      </if>
      <if test="autoDelete != null">
        #{autoDelete,jdbcType=TINYINT},
      </if>
      <if test="keyVideoAddr != null">
        #{keyVideoAddr,jdbcType=VARCHAR},
      </if>
      <if test="keyVideoPicAddr != null">
        #{keyVideoPicAddr,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myfun.repository.erpdb.po.ErpFunKeyExample" resultType="java.lang.Integer">
    <!--@mbggenerated-->
    select count(*) from FUN_KEY
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbggenerated-->
    update FUN_KEY
    <set>
      <if test="record.keyId != null">
        KEY_ID = #{record.keyId,jdbcType=INTEGER},
      </if>
      <if test="record.compId != null">
        COMP_ID = #{record.compId,jdbcType=INTEGER},
      </if>
      <if test="record.caseId != null">
        CASE_ID = #{record.caseId,jdbcType=INTEGER},
      </if>
      <if test="record.caseType != null">
        CASE_TYPE = #{record.caseType,jdbcType=TINYINT},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.trackId != null">
        TRACK_ID = #{record.trackId,jdbcType=INTEGER},
      </if>
      <if test="record.keyNum != null">
        KEY_NUM = #{record.keyNum,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.creatorTime != null">
        CREATOR_TIME = #{record.creatorTime,jdbcType=VARCHAR},
      </if>
      <if test="record.keyStatus != null">
        KEY_STATUS = #{record.keyStatus,jdbcType=TINYINT},
      </if>
      <if test="record.keyLogId != null">
        KEY_LOG_ID = #{record.keyLogId,jdbcType=INTEGER},
      </if>
      <if test="record.caseNo != null">
        CASE_NO = #{record.caseNo,jdbcType=VARCHAR},
      </if>
      <if test="record.useage != null">
        USEAGE = #{record.useage,jdbcType=TINYINT},
      </if>
      <if test="record.keyDeptId != null">
        KEY_DEPT_ID = #{record.keyDeptId,jdbcType=INTEGER},
      </if>
      <if test="record.logType != null">
        LOG_TYPE = #{record.logType,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.delTime != null">
        DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.borrowKeyTime != null">
        BORROW_KEY_TIME = #{record.borrowKeyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.borrowPhone != null">
        BORROW_PHONE = #{record.borrowPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.currentDeposit != null">
        CURRENT_DEPOSIT = #{record.currentDeposit,jdbcType=DECIMAL},
      </if>
      <if test="record.userName != null">
        USER_NAME = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.borrowUser != null">
        BORROW_USER = #{record.borrowUser,jdbcType=VARCHAR},
      </if>
      <if test="record.maxBorrowTime != null">
        MAX_BORROW_TIME = #{record.maxBorrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.depositStatus != null">
        DEPOSIT_STATUS = #{record.depositStatus,jdbcType=INTEGER},
      </if>
      <if test="record.buildId != null">
        BUILD_ID = #{record.buildId,jdbcType=INTEGER},
      </if>
      <if test="record.keyVoucher != null">
        KEY_VOUCHER = #{record.keyVoucher,jdbcType=VARCHAR},
      </if>
      <if test="record.keyType != null">
        [KEY_TYPE] = #{record.keyType,jdbcType=TINYINT},
      </if>
      <if test="record.keyCount != null">
        KEY_COUNT = #{record.keyCount,jdbcType=INTEGER},
      </if>
      <if test="record.gatherTime != null">
        GATHER_TIME = #{record.gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lendCount != null">
        LEND_COUNT = #{record.lendCount,jdbcType=INTEGER},
      </if>
      <if test="record.keyPassword != null">
        KEY_PASSWORD = #{record.keyPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.autoDelete != null">
        AUTO_DELETE = #{record.autoDelete,jdbcType=TINYINT},
      </if>
      <if test="record.keyVideoAddr != null">
        KEY_VIDEO_ADDR = #{record.keyVideoAddr,jdbcType=VARCHAR},
      </if>
      <if test="record.keyVideoPicAddr != null">
        KEY_VIDEO_PIC_ADDR = #{record.keyVideoPicAddr,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbggenerated-->
    update FUN_KEY
    set KEY_ID = #{record.keyId,jdbcType=INTEGER},
    COMP_ID = #{record.compId,jdbcType=INTEGER},
    CASE_ID = #{record.caseId,jdbcType=INTEGER},
    CASE_TYPE = #{record.caseType,jdbcType=TINYINT},
    DEPT_ID = #{record.deptId,jdbcType=INTEGER},
    TRACK_ID = #{record.trackId,jdbcType=INTEGER},
    KEY_NUM = #{record.keyNum,jdbcType=VARCHAR},
    USER_ID = #{record.userId,jdbcType=INTEGER},
    CREATOR_TIME = #{record.creatorTime,jdbcType=VARCHAR},
    KEY_STATUS = #{record.keyStatus,jdbcType=TINYINT},
    KEY_LOG_ID = #{record.keyLogId,jdbcType=INTEGER},
    CASE_NO = #{record.caseNo,jdbcType=VARCHAR},
    USEAGE = #{record.useage,jdbcType=TINYINT},
    KEY_DEPT_ID = #{record.keyDeptId,jdbcType=INTEGER},
    LOG_TYPE = #{record.logType,jdbcType=INTEGER},
    UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
    DEL_TIME = #{record.delTime,jdbcType=TIMESTAMP},
    BORROW_KEY_TIME = #{record.borrowKeyTime,jdbcType=TIMESTAMP},
    BORROW_PHONE = #{record.borrowPhone,jdbcType=VARCHAR},
    CURRENT_DEPOSIT = #{record.currentDeposit,jdbcType=DECIMAL},
    USER_NAME = #{record.userName,jdbcType=VARCHAR},
    BORROW_USER = #{record.borrowUser,jdbcType=VARCHAR},
    MAX_BORROW_TIME = #{record.maxBorrowTime,jdbcType=TIMESTAMP},
    DEPOSIT_STATUS = #{record.depositStatus,jdbcType=INTEGER},
    BUILD_ID = #{record.buildId,jdbcType=INTEGER},
    KEY_VOUCHER = #{record.keyVoucher,jdbcType=VARCHAR},
    [KEY_TYPE] = #{record.keyType,jdbcType=TINYINT},
    KEY_COUNT = #{record.keyCount,jdbcType=INTEGER},
    GATHER_TIME = #{record.gatherTime,jdbcType=TIMESTAMP},
    LEND_COUNT = #{record.lendCount,jdbcType=INTEGER},
    KEY_PASSWORD = #{record.keyPassword,jdbcType=VARCHAR},
    AUTO_DELETE = #{record.autoDelete,jdbcType=TINYINT},
    KEY_VIDEO_ADDR = #{record.keyVideoAddr,jdbcType=VARCHAR},
    KEY_VIDEO_PIC_ADDR = #{record.keyVideoPicAddr,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    update FUN_KEY
    <set>
      <if test="compId != null">
        COMP_ID = #{compId,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        CASE_ID = #{caseId,jdbcType=INTEGER},
      </if>
      <if test="caseType != null">
        CASE_TYPE = #{caseType,jdbcType=TINYINT},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="trackId != null">
        TRACK_ID = #{trackId,jdbcType=INTEGER},
      </if>
      <if test="keyNum != null">
        KEY_NUM = #{keyNum,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="creatorTime != null">
        CREATOR_TIME = #{creatorTime,jdbcType=VARCHAR},
      </if>
      <if test="keyStatus != null">
        KEY_STATUS = #{keyStatus,jdbcType=TINYINT},
      </if>
      <if test="keyLogId != null">
        KEY_LOG_ID = #{keyLogId,jdbcType=INTEGER},
      </if>
      <if test="caseNo != null">
        CASE_NO = #{caseNo,jdbcType=VARCHAR},
      </if>
      <if test="useage != null">
        USEAGE = #{useage,jdbcType=TINYINT},
      </if>
      <if test="keyDeptId != null">
        KEY_DEPT_ID = #{keyDeptId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        LOG_TYPE = #{logType,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delTime != null">
        DEL_TIME = #{delTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowKeyTime != null">
        BORROW_KEY_TIME = #{borrowKeyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="borrowPhone != null">
        BORROW_PHONE = #{borrowPhone,jdbcType=VARCHAR},
      </if>
      <if test="currentDeposit != null">
        CURRENT_DEPOSIT = #{currentDeposit,jdbcType=DECIMAL},
      </if>
      <if test="userName != null">
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="borrowUser != null">
        BORROW_USER = #{borrowUser,jdbcType=VARCHAR},
      </if>
      <if test="maxBorrowTime != null">
        MAX_BORROW_TIME = #{maxBorrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="depositStatus != null">
        DEPOSIT_STATUS = #{depositStatus,jdbcType=INTEGER},
      </if>
      <if test="buildId != null">
        BUILD_ID = #{buildId,jdbcType=INTEGER},
      </if>
      <if test="keyVoucher != null">
        KEY_VOUCHER = #{keyVoucher,jdbcType=VARCHAR},
      </if>
      <if test="keyType != null">
        [KEY_TYPE] = #{keyType,jdbcType=TINYINT},
      </if>
      <if test="keyCount != null">
        KEY_COUNT = #{keyCount,jdbcType=INTEGER},
      </if>
      <if test="gatherTime != null">
        GATHER_TIME = #{gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lendCount != null">
        LEND_COUNT = #{lendCount,jdbcType=INTEGER},
      </if>
      <if test="keyPassword != null">
        KEY_PASSWORD = #{keyPassword,jdbcType=VARCHAR},
      </if>
      <if test="autoDelete != null">
        AUTO_DELETE = #{autoDelete,jdbcType=TINYINT},
      </if>
      <if test="keyVideoAddr != null">
        KEY_VIDEO_ADDR = #{keyVideoAddr,jdbcType=VARCHAR},
      </if>
      <if test="keyVideoPicAddr != null">
        KEY_VIDEO_PIC_ADDR = #{keyVideoPicAddr,jdbcType=VARCHAR},
      </if>
    </set>
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myfun.repository.erpdb.po.ErpFunKey">
    <!--@mbggenerated-->
    update FUN_KEY
    set COMP_ID = #{compId,jdbcType=INTEGER},
    CASE_ID = #{caseId,jdbcType=INTEGER},
    CASE_TYPE = #{caseType,jdbcType=TINYINT},
    DEPT_ID = #{deptId,jdbcType=INTEGER},
    TRACK_ID = #{trackId,jdbcType=INTEGER},
    KEY_NUM = #{keyNum,jdbcType=VARCHAR},
    USER_ID = #{userId,jdbcType=INTEGER},
    CREATOR_TIME = #{creatorTime,jdbcType=VARCHAR},
    KEY_STATUS = #{keyStatus,jdbcType=TINYINT},
    KEY_LOG_ID = #{keyLogId,jdbcType=INTEGER},
    CASE_NO = #{caseNo,jdbcType=VARCHAR},
    USEAGE = #{useage,jdbcType=TINYINT},
    KEY_DEPT_ID = #{keyDeptId,jdbcType=INTEGER},
    LOG_TYPE = #{logType,jdbcType=INTEGER},
    UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
    DEL_TIME = #{delTime,jdbcType=TIMESTAMP},
    BORROW_KEY_TIME = #{borrowKeyTime,jdbcType=TIMESTAMP},
    BORROW_PHONE = #{borrowPhone,jdbcType=VARCHAR},
    CURRENT_DEPOSIT = #{currentDeposit,jdbcType=DECIMAL},
    USER_NAME = #{userName,jdbcType=VARCHAR},
    BORROW_USER = #{borrowUser,jdbcType=VARCHAR},
    MAX_BORROW_TIME = #{maxBorrowTime,jdbcType=TIMESTAMP},
    DEPOSIT_STATUS = #{depositStatus,jdbcType=INTEGER},
    BUILD_ID = #{buildId,jdbcType=INTEGER},
    KEY_VOUCHER = #{keyVoucher,jdbcType=VARCHAR},
    [KEY_TYPE] = #{keyType,jdbcType=TINYINT},
    KEY_COUNT = #{keyCount,jdbcType=INTEGER},
    GATHER_TIME = #{gatherTime,jdbcType=TIMESTAMP},
    LEND_COUNT = #{lendCount,jdbcType=INTEGER},
    KEY_PASSWORD = #{keyPassword,jdbcType=VARCHAR},
    AUTO_DELETE = #{autoDelete,jdbcType=TINYINT},
    KEY_VIDEO_ADDR = #{keyVideoAddr,jdbcType=VARCHAR},
    KEY_VIDEO_PIC_ADDR = #{keyVideoPicAddr,jdbcType=VARCHAR}
    where KEY_ID = #{keyId,jdbcType=INTEGER}
  </update>
  <resultMap extends="BaseResultMap" id="KeyDtoResultMap" type="com.myfun.repository.erpdb.dto.ErpFunKeyDto">

    <result column="houseDeptId" jdbcType="INTEGER" property="houseDeptId" />
    <result column="BUILD_NAME" jdbcType="VARCHAR" property="buildName" />
    <result column="room" property="room" />
    <result column="wei" property="wei" />
    <result column="yang" property="yang" />
    <result column="hall" property="hall" />
    <result column="floor" property="floor" />
    <result column="floors" property="floors" />
    <result column="totalPrice" property="totalPrice" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="extResultMap" type="com.myfun.repository.erpdb.dto.ErpFunKeyDto">

  </resultMap>
  <!-- 查询列来源表 -->
  <sql id="QUERY_FROM_TABLE">${baseQuery.tableName}</sql>
  <!-- 所有查询列，可自定义列 -->
  <sql id="QUERY_COLUMN_LIST_OBJ">
    <if test="baseQuery.columns != null and baseQuery.columns.length &gt; 0">
      <foreach collection="baseQuery.columns" item="column" separator=",">
        ${column}
      </foreach>
    </if>
    <if test="baseQuery.columns == null or baseQuery.columns.length == 0">
      <include refid="Base_Column_List" />
    </if>
  </sql>
  <!-- 更新的条件 -->
  <sql id="CONDITIONS_LIST">
    <if test="baseQuery.conditions != null and baseQuery.conditions.size() &gt; 0">
      <foreach collection="baseQuery.conditions" item="item" separator=" ">
        <if test="item.column == &quot;)&quot; or item.column == &quot;(&quot;">${item.logic} ${item.column}
        </if>
        <if test="item.column != &quot;)&quot; and item.column != &quot;(&quot; and item.values != null">
          ${item.logic} ${item.column} ${item.add} #{item.values}
        </if>
        <if test="item.column != &quot;)&quot; and item.column != &quot;(&quot; and item.valuesArr != null">
          ${item.logic} ${item.column} ${item.add}
          <foreach close=")" collection="item.valuesArr" item="val" open="(" separator=",">#{val}</foreach>
        </if>
      </foreach>
    </if>
  </sql>
  <!-- 更新自定义列字段 -->
  <sql id="UPDATE_LIST_COLUMN">
    <if test="baseQuery.updateColumns != null baseQuery.and updateColumns.size() &gt; 0">
      <foreach collection="baseQuery.updateColumns" item="item" separator=",">
        <if test="item.logic != null and item.logic != '' and item.column == null">${item.logic}</if>
        <if test="item.add != null and item.add != ''">${item.column} ${item.add} #{item.values}</if>
      </foreach>
    </if>
  </sql>
  <!-- 排序 -->
  <sql id="QUERY_GROUP_ORDER_CONDTION">
    <if test="baseQuery.groupByField != null and baseQuery.groupByField != ''">GROUP BY ${baseQuery.groupByField}
    </if>
    <if test="baseQuery.orderByField != null and baseQuery.orderByField != ''">ORDER BY ${baseQuery.orderByField}
    </if>
  </sql>
  <!-- 查询,通过条件 -->
  <select id="selectListByCondition" parameterType="com.myfun.repository.support.mybatis.condition.BaseQuery" resultMap="KeyDtoResultMap">
    SELECT
    <include refid="QUERY_COLUMN_LIST_OBJ" />
    FROM
    <include refid="QUERY_FROM_TABLE" />
    <where>
      <include refid="CONDITIONS_LIST" />
    </where>
    <include refid="QUERY_GROUP_ORDER_CONDTION" />
  </select>
  <select id="selectKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_KEY
    where COMP_ID = #{conditionModel.compId,jdbcType=INTEGER} and KEY_STATUS != 3
    <if test="conditionModel.keyId != null">
      and KEY_ID = #{conditionModel.keyId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.caseId != null">
      and CASE_ID = #{conditionModel.caseId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.caseType != null">
      and CASE_TYPE = #{conditionModel.caseType,jdbcType=TINYINT}
    </if>
    <if test="conditionModel.deptId != null">
      and DEPT_ID = #{conditionModel.deptId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.trackId != null">
      and TRACK_ID = #{conditionModel.trackId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.keyNum != null">
      and KEY_NUM = #{conditionModel.keyNum,jdbcType=VARCHAR}
    </if>
    <if test="conditionModel.userId != null">
      and USER_ID = #{conditionModel.userId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.creatorTime != null">
      and CREATOR_TIME = #{conditionModel.creatorTime,jdbcType=VARCHAR}
    </if>
    <if test="conditionModel.keyStatus != null">
      and KEY_STATUS = #{conditionModel.keyStatus,jdbcType=TINYINT}
    </if>
    <if test="conditionModel.keyLogId != null">
      and KEY_LOG_ID = #{conditionModel.keyLogId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.caseNo != null">
      and CASE_NO = #{conditionModel.caseNo,jdbcType=VARCHAR}
    </if>
    <if test="conditionModel.useage != null">
      and USE_AGE = #{conditionModel.useage,jdbcType=TINYINT}
    </if>
    <if test="conditionModel.keyDeptId != null">
      and KEY_DEPT_ID = #{conditionModel.keyDeptId,jdbcType=INTEGER}
    </if>
  </select>
  <select id="countFunKey" resultType="java.lang.Integer">
    select
    count(*) as attr
    from FUN_KEY
    where COMP_ID = #{compId,jdbcType=INTEGER}
    <if test="conditionModel.keyId != null">
      and KEY_ID = #{conditionModel.keyId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.caseId != null">
      and CASE_ID = #{conditionModel.caseId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.caseType != null">
      and CASE_TYPE = #{conditionModel.caseType,jdbcType=TINYINT}
    </if>
    <if test="conditionModel.deptId != null">
      and DEPT_ID = #{conditionModel.deptId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.trackId != null">
      and TRACK_TYPE = #{conditionModel.trackId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.keyNum != null">
      and KEY_NUM = #{conditionModel.keyNum,jdbcType=VARCHAR}
    </if>
    <if test="conditionModel.userId != null">
      and USER_ID = #{conditionModel.userId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.creatorTime != null">
      and CREATOR_TIME = #{conditionModel.creatorTime,jdbcType=VARCHAR}
    </if>
    <if test="conditionModel.keyStatus != null">
      and KEY_STATUS = #{conditionModel.keyStatus,jdbcType=TINYINT}
    </if>
    <if test="conditionModel.keyLogId != null">
      and KEY_LOG_ID = #{conditionModel.keyLogId,jdbcType=INTEGER}
    </if>
    <if test="conditionModel.caseNo != null">
      and CASE_NO = #{conditionModel.caseNo,jdbcType=VARCHAR}
    </if>
    <if test="conditionModel.useage != null">
      and USE_AGE = #{conditionModel.useage,jdbcType=TINYINT}
    </if>
    <if test="conditionModel.keyDeptId != null">
      and KEY_DEPT_ID = #{conditionModel.keyDeptId,jdbcType=INTEGER}
    </if>
    AND KEY_STATUS != 3
  </select>
  <delete id="deleteFunKey" parameterType="java.lang.Integer">
    update FUN_KEY set KEY_STATUS = 3
    where KEY_ID IN
    <foreach close=")" collection="keyIds" item="keyId" open="(" separator=",">
      #{keyId,jdbcType=INTEGER}
    </foreach>
  </delete>
  <select id="getKeyIdsByCondition" resultType="java.lang.Integer">
  	select KEY_ID from fun_key where CASE_ID = #{param.caseId}
  	and CASE_TYPE = #{param.caseType} and COMP_ID = #{param.compId}
  </select>
  <select id="getMgrSubmitKeyLogList" resultMap="extResultMap">
    select A.KEY_ID, A.COMP_ID, A.CASE_ID, A.CASE_TYPE, A.DEPT_ID, A.TRACK_ID, A.KEY_NUM, A.USER_ID, A.CREATOR_TIME,
    A.KEY_STATUS, A.KEY_LOG_ID, A.CASE_NO, A.USEAGE, A.KEY_DEPT_ID from fun_key A
    <if test="null != pMap.grId and '' != pMap.grId">
      JOIN FUN_USERS B ON B.USER_ID=A.USER_ID AND B.GR_ID=#{pMap.grId}
    </if>
    <where>
      AND A.COMP_ID = #{pMap.compId}
      <if test="null != pMap.sCaseType and '' != pMap.sCaseType and 'ALL' != pMap.sCaseType">
        AND A.CASE_TYPE = #{pMap.sCaseType}
      </if>
      <if test="null != pMap.keyStatus and '' != pMap.keyStatus and 'ALL' != pMap.keyStatus ">
        AND A.KEY_STATUS = #{pMap.keyStatus}
      </if>
      <if test="null != pMap.deptId and '' != pMap.deptId and 'ALL' != pMap.deptId ">
        AND A.DEPT_ID = #{pMap.deptId}
      </if>
      <if test="null != pMap.cUserId and '' != pMap.cUserId and 'ALL' != pMap.cUserId ">
        AND A.USER_ID = #{pMap.cUserId}
      </if>
      <if test="null != pMap.houseNo and '' != pMap.houseNo and 'ALL' != pMap.houseNo ">
        AND A.CASE_NO like '%'+#{pMap.houseNo}+'%'
      </if>
      <if test="((null != pMap.regId and '' != pMap.regId) or (null != pMap.areaId and '' != pMap.areaId) ) and null != pMap.deptIds">
        AND A.DEPT_ID = (${pMap.deptIds})
      </if>
      <if test="null != pMap.sDate1 and '' != pMap.sDate1">
        AND A.CREATOR_TIME &gt;=#{pMap.sDate1}
      </if>
      <if test="null != pMap.sDate2 and '' != pMap.sDate2">
        AND A.CREATOR_TIME &lt;=#{pMap.sDate2}
      </if>
    </where>
    order by KEY_ID desc
  </select>

  <select id="getExistNum" resultType="java.lang.String">
		SELECT KEY_NUM FROM FUN_KEY
		where CASE_ID = #{caseId} and CASE_TYPE = #{caseType} and COMP_ID = #{compId}
	</select>

  <select id="getExistKeyNum" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_KEY
    where COMP_ID = #{compId} and ((CASE_ID = #{caseId} and CASE_TYPE = #{caseType})
    <if test="saleLeaseId != null">
      or (CASE_ID = #{saleLeaseId} and CASE_TYPE = #{saleLeaseType})
    </if>
    )
  </select>

  <select id="getNewNum" resultMap="BaseResultMap">
    SELECT TOP 100
    <include refid="Base_Column_List" />
    FROM FUN_KEY
    WHERE KEY_DEPT_ID = #{keyDeptId} AND COMP_ID = #{compId}
    ORDER BY KEY_NUM ASC
  </select>

  <select id="getKeyInfoByKeyNum" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from FUN_KEY
    where KEY_NUM = #{param.keyNum} and COMP_ID = #{param.compId}
  </select>
  <update id="updateErpFunKey">
    update FUN_KEY
    set  DEPT_ID = #{deptId}
    where CASE_ID = #{caseId} and CASE_TYPE = #{caseType} and COMP_ID =#{compId}
  </update>

  <select id="getErpFunKey" resultMap="BaseResultMap">
    select top 1
    <include refid="Base_Column_List" />
    from FUN_KEY
    where CASE_ID = #{caseId} and CASE_TYPE = #{caseType} and COMP_ID =#{compId} and KEY_STATUS != 3
  </select>

  <select id="getListByCaseId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    FROM FUN_KEY
    WHERE COMP_ID = #{compId}
    AND
    (
    (CASE_ID = #{caseId} and CASE_TYPE = #{caseType})
    <if test="saleLeaseId != null">
      OR (CASE_ID = #{saleLeaseId} and CASE_TYPE = #{saleLeaseType})
    </if>
    )
    AND KEY_STATUS != 3
  </select>
  <update id="updateKeyStatusAndLogId">
		update FUN_KEY
		set KEY_STATUS = #{keyStatus},KEY_LOG_ID = #{keyLogId}
		where COMP_ID = #{compId} and KEY_ID = #{keyId}
	</update>

  <select id="getKeyNum" resultType="java.lang.String">
    SELECT TOP 1 A.KEY_NUM
    FROM KEY_NUM_TEMPLATE A
    LEFT JOIN DBO.FUN_KEY B ON
    <choose>
      <when test="null ==userId">
        #{deptNo}+A.KEY_NUM=B.KEY_NUM AND B.COMP_ID=#{compId} AND KEY_DEPT_ID=#{deptId}
      </when>
      <otherwise>
        A.KEY_NUM=B.KEY_NUM AND B.USER_ID=#{userId} AND B.COMP_ID=#{compId}
      </otherwise>
    </choose>
    WHERE B.KEY_ID IS NULL
    ORDER BY A.ID ASC
  </select>

  <select id="getKeyModel" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    FROM FUN_KEY
    WHERE COMP_ID = #{compId} and ((CASE_TYPE = #{caseType} and CASE_ID = #{caseId})
    <if test="saleLeaseType != null">
      or (CASE_TYPE = #{saleLeaseType} and CASE_ID = #{saleLeaseId})
    </if>)
  </select>
  <select id="getErpFunKeyById" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    FROM FUN_KEY
    WHERE COMP_ID = #{compId} and KEY_ID =#{keyId}
  </select>
  <select id="selectKeyByNum" resultMap="BaseResultMap">
    SELECT KEY_ID, COMP_ID, CASE_ID, CASE_TYPE, DEPT_ID, TRACK_ID, KEY_NUM, USER_ID, CREATOR_TIME,
    KEY_STATUS, KEY_LOG_ID, CASE_NO, USEAGE, KEY_DEPT_ID , KEY_TYPE, KEY_COUNT, GATHER_TIME, LEND_COUNT, KEY_PASSWORD
    FROM FUN_KEY WHERE CASE_ID = #{caseId} and CASE_TYPE = #{caseType} and KEY_NUM = #{keyNum} AND KEY_STATUS!=3
    </select>
  <select id="selectKeyNum" resultType="java.lang.String">
    	select TOP 1 a.KEY_NUM from KEY_NUM_TEMPLATE a left join FUN_KEY b ON
    	#{deptNo} + a.key_num = b.KEY_NUM AND b.COMP_ID = #{compId} AND b.KEY_DEPT_ID = #{deptId}
    	where b.KEY_ID is null
    	ORDER BY a.id asc
    </select>
  <resultMap extends="BaseResultMap" id="baseMapWithRemark" type="com.myfun.repository.erpdb.dto.ErpFunKeyWithRemarkDTO">
    <result column="REMARK" javaType="String" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <select id="getErpFunKeyWithRemark" resultMap="baseMapWithRemark">
    SELECT KEY_ID, DEPT_ID, KEY_NUM, USER_ID, KEY_STATUS, KEY_DEPT_ID, KEY_TYPE, KEY_COUNT, GATHER_TIME, LEND_COUNT, KEY_PASSWORD,KEY_VIDEO_ADDR,KEY_VIDEO_PIC_ADDR,
    (SELECT TOP 1 REMARK FROM FUN_KEY_REMARK
    WHERE COMP_ID = #{compId} AND CASE_ID = #{caseId}
    AND CASE_TYPE = #{caseType} ORDER BY CREATION_TIME DESC) REMARK
    FROM FUN_KEY WHERE COMP_ID = #{compId} AND CASE_ID = #{caseId}
    AND CASE_TYPE = #{caseType} AND KEY_STATUS &lt;&gt; 3
    <if test="userId != null">
      AND USER_ID = #{userId}
    </if>
  </select>
  <select id="findByCaseIdAndCaseType" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_KEY
    <where>
      <if test="caseId != null">
        AND CASE_ID = #{caseId}
      </if>
      <if test="caseType != null">
        AND CASE_TYPE = #{caseType}
      </if>
      AND KEY_STATUS in (2,4)
    </where>
  </select>
  <select id="findListByKeyIds" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM FUN_KEY
    WHERE KEY_ID IN
    <foreach close=")" collection="ids" index="index" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </select>
  <update id="updateErpFunKeyStatus">
    UPDATE FUN_KEY SET KEY_STATUS = 2 ,LOG_TYPE = 2 ,BORROW_USER ='',BORROW_PHONE = '',UPDATE_TIME = GETDATE() WHERE KEY_LOG_ID = #{keyLogId} AND KEY_ID = #{keyId}
  </update>

  <update id="updateKeyStatusAndLogIdAndLogType">
     UPDATE FUN_KEY SET KEY_STATUS = 1,LOG_TYPE = #{logType},KEY_LOG_ID = #{keyLogId} WHERE KEY_ID = #{funKeyId}
  </update>
  <resultMap id="keyDetail" type="com.myfun.houseWeb.app.common.vo.KeyDetailVO">
    <result column="KEY_STATUS" property="keyStatus" />
    <result column="KEY_DEPT_ID" property="keyDeptId" />
    <result column="USER_NAME" property="userName" />
    <result column="DEPT_NAME" property="keyDeptName" />
  </resultMap>
  <select id="getKeyDetail" resultType="com.myfun.houseWeb.app.common.vo.KeyDetailVO">
    SELECT TOP 1 A.KEY_STATUS,A.KEY_DEPT_ID,C.USER_NAME,B.DEPT_NAME
    FROM FUN_KEY A LEFT JOIN FUN_DEPTS B ON A.KEY_DEPT_ID=B.DEPT_ID JOIN FUN_USERS C ON A.USER_ID=C.USER_ID
    WHERE A.COMP_ID= #{compId}
    <choose>
      <when test="saleLeaseId != null">
        AND ((A.CASE_ID= #{caseId} AND A.CASE_TYPE= #{type}) OR (A.CASE_ID= #{saleLeaseId} AND
        A.CASE_TYPE=#{saleLeaseType}))
      </when>
      <otherwise>
        AND A.CASE_ID= #{caseId} AND A.CASE_TYPE= #{type}
      </otherwise>
    </choose>

  </select>

  <resultMap id="keyInfoMap" type="com.myfun.houseWeb.app.property.vo.FunKeyInfoVo">
    <result column="CASE_ID" property="caseId" />
    <result column="CASE_TYPE" property="caseType" />
    <result column="KEY_ID" property="keyId" />
    <result column="DEPT_NAME" property="deptId" />
    <result column="KEY_NUM" property="keyNum" />
    <result column="KEY_STATUS" property="keyStatus" />
    <result column="KEY_DEPT_ID" property="keyDeptId" />
    <result column="LOG_TYPE" property="logType" />
    <result column="DEPOSIT_STATUS" property="depositStatus" />

    <result column="UPDATE_TIME" property="updateTime" />
    <result column="DEL_TIME" property="delTime" />
    <result column="BORROW_KEY_TIME" property="borrowKeyTime" />
    <result column="BORROW_KEY_TIME" property="borrowKeyTime" />
    <result column="MAX_BORROW_TIME" property="maxBorrowTime" />


    <result column="SALE_ROOF" property="saleRoof" />
    <result column="SALE_UNIT" property="saleUnit" />
    <result column="SALE_UNIT_FLOOR" property="saleUnitFloor" />
    <result column="SALE_NUM" property="saleNum" />
    <result column="SALE_ROOM" property="saleRoom" />
    <result column="SALE_AREA" property="saleArea" />
    <result column="SALE_TOTAL_PRICE" property="saleTotalPrice" />


    <result column="HOUSE_ROOF" property="houseRoof" />
    <result column="HOUSE_UNIT" property="houseUnit" />
    <result column="HOUSE_UNIT_FLOOR" property="houseUnitFloor" />
    <result column="HOUSE_NUM" property="houseNum" />
    <result column="HOUSE_ROOM" property="houseRoom" />
    <result column="HOUSE_AREA" property="houseArea" />
    <result column="HOUSE_TOTAL_PRICE" property="houseTotalPrice" />

    <result column="USEAGE" property="useage" />
    <result column="TRADE_ADDR" property="tradeAddr" />

    <result column="PRICE_UNIT" property="priceUnit" />
    <result column="SALE_LEASE_ID" property="saleLeaseId" />

    <result column="CREATION_TIME" property="creationTime" />
    <result column="BORROW_PHONE" property="borrowPhone" />
    <result column="BORROW_USER" property="borrowName" />
    <result column="CURRENT_DEPOSIT" property="currentDeposit" />
    <result column="USER_NAME" property="userName" />
    <result column="BUILD_ID" property="buildId" />
    <result column="BUILD_NAME" property="buildName" />

    <result column="KEY_TYPE" jdbcType="TINYINT" property="keyType" />
    <result column="KEY_COUNT" jdbcType="INTEGER" property="keyCount" />
    <result column="GATHER_TIME" jdbcType="TIMESTAMP" property="gatherTime" />
    <result column="LEND_COUNT" jdbcType="INTEGER" property="lendCount" />
    <result column="KEY_PASSWORD" jdbcType="VARCHAR" property="keyPassword" />
    <result column="USER_ID" jdbcType="INTEGER" property="userId" />

  </resultMap>

  <select id="getKeyList" resultMap="keyInfoMap">
    select * from (
    select
    k.CASE_ID,k.CASE_TYPE,k.KEY_ID,k.DEPT_ID,k.KEY_NUM,k.KEY_STATUS,k.KEY_DEPT_ID,k.LOG_TYPE,k.UPDATE_TIME,k.DEL_TIME,k.BORROW_KEY_TIME,k.CREATOR_TIME,
    k.CURRENT_DEPOSIT,k.BORROW_PHONE,k.BORROW_USER,k.USER_NAME, k.MAX_BORROW_TIME,k.DEPOSIT_STATUS, k.KEY_TYPE, k.KEY_COUNT, k.GATHER_TIME, k.LEND_COUNT, k.KEY_PASSWORD,
    l.SALE_ROOF HOUSE_ROOF,l.SALE_UNIT HOUSE_UNIT,l.UNIT_FLOOR HOUSE_UNIT_FLOOR,l.SALE_NUM HOUSE_NUM,l.SALE_ROOM
    HOUSE_ROOM,l.SALE_AREA HOUSE_AREA,
    l.SALE_USEAGE useage , l.TRADE_ADDR , l.SALE_TOTAL_PRICE HOUSE_TOTAL_PRICE, 0 as PRICE_UNIT,l.SALE_LEASE_ID
    from FUN_KEY k left join FUN_SALE l on k.CASE_ID = l.SALE_ID
    <where>
      and k.CASE_TYPE = 1
      <if test="null != keyParam.buildId and '' != keyParam.buildId">
        and k.BUILD_ID = #{keyParam.buildId}
      </if>

      <if test="null != keyParam.deptId and '' != keyParam.deptId">
        and k.DEPT_ID = #{keyParam.deptId}
      </if>

      <if test="null != keyParam.compId and '' != keyParam.compId">
        and k.COMP_ID = #{keyParam.compId}
      </if>
      <if test="null != keyParam.partnerId and '' != keyParam.partnerId">
        and l.PARTNER_ID = #{keyParam.partnerId}
      </if>

      <if test="queryParam != null">
        <choose>
          <when test="keyParam.organizationId != null and keyParam.organizationId != 0">
            and l.TISSUE_LINE like concat('%', #{keyParam.organizationId}, '%')
          </when>
          <otherwise>
            <if test="queryParam.limit and queryParam.queryOrgIds != null and queryParam.queryOrgIds.size() &gt; 0">
              AND l.ORGANIZATION_ID IN
              <foreach close=")" collection="queryParam.queryOrgIds" item="orgId" open="(" separator=",">
                #{orgId}
              </foreach>
            </if>
          </otherwise>
        </choose>
      </if>

      <if test="null != keyParam.buildRoof and '' != keyParam.buildRoof">
        and l.SALE_ROOF = #{keyParam.buildRoof}
      </if>
      <if test="null != keyParam.buildUnit and '' != keyParam.buildUnit">
        and l.SALE_UNIT = #{keyParam.buildUnit}
      </if>
      <if test="null != keyParam.buildFloor and '' != keyParam.buildFloor">
        and l.UNIT_FLOOR = #{keyParam.buildFloor}
      </if>
      <if test="null != keyParam.buildNum and '' != keyParam.buildNum">
        and l.SALE_NUM = #{keyParam.buildNum}
      </if>

      <if test="null != keyParam.userId and '' != keyParam.userId">
        and k.USER_ID = #{keyParam.userId}
      </if>
      <if test="null != keyParam.keyStatus and '' != keyParam.keyStatus">
        <choose>
          <when test="keyParam.keyStatus==4">
            and GETDATE() &gt; k.MAX_BORROW_TIME and k.KEY_STATUS =1 AND k.LOG_TYPE = 2
          </when>
          <otherwise>
            AND k.KEY_STATUS = #{keyParam.keyStatus}
          </otherwise>
        </choose>

      </if>

      <if test="null != keyParam.keyIds and '' != keyParam.keyIds">
        and k.KEY_ID not in
        <foreach close=")" collection="keyParam.keyIdList" index="index" item="item" open="(" separator=",">
          #{item}
        </foreach>
      </if>

    </where>
    union all
    select
    k.CASE_ID,k.CASE_TYPE,k.KEY_ID,k.DEPT_ID,k.KEY_NUM,k.KEY_STATUS,k.KEY_DEPT_ID,k.LOG_TYPE,k.UPDATE_TIME,k.DEL_TIME,k.BORROW_KEY_TIME,k.CREATOR_TIME,
    k.CURRENT_DEPOSIT,k.BORROW_PHONE,k.BORROW_USER,k.USER_NAME, k.MAX_BORROW_TIME,k.DEPOSIT_STATUS,
    l.LEASE_ROOF HOUSE_ROOF,l.LEASE_UNIT HOUSE_UNIT,l.UNIT_FLOOR HOUSE_UNIT_FLOOR,l.LEASE_NUM HOUSE_NUM,l.LEASE_ROOM
    HOUSE_ROOM,l.LEASE_AREA HOUSE_AREA,
    l.lease_useage useage , l.TRADE_ADDR , l.LEASE_TOTAL_PRICE HOUSE_TOTAL_PRICE ,l.PRICE_UNIT,l.SALE_LEASE_ID
    from FUN_KEY k left join FUN_LEASE l on k.CASE_ID = l.LEASE_ID
    <where>

      and k.CASE_TYPE = 2
      <if test="null != keyParam.buildId and '' != keyParam.buildId">
        and k.BUILD_ID = #{keyParam.buildId}
      </if>

      <if test="null != keyParam.deptId and '' != keyParam.deptId">
        and k.DEPT_ID = #{keyParam.deptId}
      </if>

      <if test="null != keyParam.compId and '' != keyParam.compId">
        and k.COMP_ID = #{keyParam.compId}
      </if>
      <if test="null != keyParam.partnerId and '' != keyParam.partnerId">
        and l.PARTNER_ID = #{keyParam.partnerId}
      </if>

      <if test="queryParam != null">
        <choose>
          <when test="keyParam.organizationId != null and keyParam.organizationId != 0">
            and l.ORGANIZATION_ID = #{keyParam.organizationId}
          </when>
          <otherwise>
            <if test="queryParam.limit and queryParam.queryOrgIds != null and queryParam.queryOrgIds.size() &gt; 0">
              AND l.ORGANIZATION_ID IN
              <foreach close=")" collection="queryParam.queryOrgIds" item="orgId" open="(" separator=",">
                #{orgId}
              </foreach>
            </if>
          </otherwise>
        </choose>
      </if>

      <if test="null != keyParam.buildRoof and '' != keyParam.buildRoof">
        and l.LEASE_ROOF = #{keyParam.buildRoof}
      </if>
      <if test="null != keyParam.buildUnit and '' != keyParam.buildUnit">
        and l.LEASE_UNIT = #{keyParam.buildUnit}
      </if>
      <if test="null != keyParam.buildFloor and '' != keyParam.buildFloor">
        and l.UNIT_FLOOR = #{keyParam.buildFloor}
      </if>
      <if test="null != keyParam.buildNum and '' != keyParam.buildNum">
        and l.LEASE_NUM = #{keyParam.buildNum}
      </if>

      <if test="null != keyParam.userId and '' != keyParam.userId">
        and k.USER_ID = #{keyParam.userId}
      </if>
      <if test="null != keyParam.keyStatus and '' != keyParam.keyStatus">
        <choose>
          <when test="keyParam.keyStatus==4">
            and GETDATE() &gt; k.MAX_BORROW_TIME and k.KEY_STATUS =1 AND k.LOG_TYPE = 2
          </when>
          <otherwise>
            AND k.KEY_STATUS = #{keyParam.keyStatus}
          </otherwise>
        </choose>

      </if>

      <if test="null != keyParam.keyIds and '' != keyParam.keyIds">
        and k.KEY_ID not in
        <foreach close=")" collection="keyParam.keyIdList" index="index" item="item" open="(" separator=",">
          #{item}
        </foreach>
      </if>

    </where>
    ) a

    ORDER BY ( CASE KEY_STATUS WHEN 0 THEN 5 WHEN 1 THEN ( CASE when(GETDATE()&gt;MAX_BORROW_TIME)then 0 ELSE 1 end)
    WHEN 2 THEN 3 WHEN 3 THEN 4 END ) ASC ,

    CREATOR_TIME desc


  </select>
  <select id="getErpFunKeyStatistic" resultType="com.myfun.houseWeb.app.property.vo.FunKeyStatisticInfoVo">
    SELECT
    <choose>
      <when test="param.groupType==1">
        BUILD_ID AS buildId,
      </when>
      <otherwise>
        USER_ID AS userId,
      </otherwise>
    </choose>
    COUNT(KEY_ID) AS totalCount,
    SUM(IIF(CREATOR_TIME &gt;= #{param.startDate} AND CREATOR_TIME &lt;= #{param.endDate},1,0 )) AS AddCount,
    SUM(IIF(LOG_TYPE=1 AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;= #{param.endDate} ,1,0))
    AS inLendCount,
    SUM(IIF(LOG_TYPE=2 AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;= #{param.endDate},1,0))
    AS outLendCount,
    SUM(IIF(LOG_TYPE=1 AND KEY_STATUS = 1 AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;=
    #{param.endDate} ,1,0))AS inLendOutCount,
    SUM(IIF(LOG_TYPE=1 AND KEY_STATUS = 2 AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;=
    #{param.endDate},1,0))AS inLendGiveBackCount,
    SUM(IIF(LOG_TYPE=2 AND KEY_STATUS = 1 AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;=
    #{param.endDate} AND GETDATE() &lt; MAX_BORROW_TIME,1,0))AS outLendOutCount,
    SUM(IIF(LOG_TYPE=2 AND KEY_STATUS = 1 AND GETDATE() &gt; MAX_BORROW_TIME
    AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;= #{param.endDate},1,0))AS
    outLendOverTimeCount,
    SUM(IIF(LOG_TYPE=2 AND KEY_STATUS = 2 AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;=
    #{param.endDate},1,0))AS outLendGiveBackCount,
    SUM(IIF(LOG_TYPE=2 AND KEY_STATUS IN (1,2) AND DEPOSIT_STATUS=3
    AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;= #{param.endDate},CURRENT_DEPOSIT,0))AS
    cashPledgeTotalcount
    FROM
    FUN_KEY
    WHERE
    COMP_ID=#{compId} AND CASE_TYPE=#{param.caseType} AND KEY_STATUS IN(0,1,2)
    GROUP BY
    <choose>
      <when test="param.groupType==1">
        BUILD_ID
      </when>
      <otherwise>
        USER_ID
      </otherwise>
    </choose>
    ORDER BY
    COUNT(LOG_TYPE) DESC,
    <choose>
      <when test="param.groupType==1">
        BUILD_ID
      </when>
      <otherwise>
        USER_ID
      </otherwise>
    </choose>
    DESC
    OFFSET (#{param.pageOffset}-1) * #{param.pageRows} ROW FETCH NEXT #{param.pageRows} ROWS ONLY
  </select>
  <select id="getFunKeyStatisticTotalcount" resultType="java.lang.Integer">
    SELECT COUNT( DISTINCT
    <choose>
      <when test="param.groupType==1">
        BUILD_ID
      </when>
      <otherwise>
        USER_ID
      </otherwise>
    </choose>
    )
    FROM
    FUN_KEY
    WHERE
    COMP_ID=#{compId} AND CASE_TYPE=#{param.caseType} AND KEY_STATUS IN(0,1,2)
    AND
    <choose>
      <when test="param.groupType==1">
        BUILD_ID
      </when>
      <otherwise>
        USER_ID
      </otherwise>
    </choose>
    &gt; 0
  </select>
  <select id="getFunKeyStatisticDetailCount" resultType="java.lang.Integer">
    SELECT
    COUNT(*)
    FROM
    FUN_KEY
    WHERE
    COMP_ID=#{compId} AND
    <choose>
      <when test="param.keyStatus==4">
        KEY_STATUS = 1 AND GETDATE() &gt; MAX_BORROW_TIME
      </when>
      <when test="param.keyStatus==5">
        KEY_STATUS IN (1,2)  AND DEPOSIT_STATUS=3
      </when>
      <otherwise>
        KEY_STATUS = #{param.keyStatus}
      </otherwise>
    </choose>
    AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;= #{param.endDate}
    AND CASE_TYPE=#{param.caseType} AND LOG_TYPE =#{param.logType}
    AND
    <choose>
      <when test="param.groupType==1">
        BUILD_ID
      </when>
      <otherwise>
        USER_ID
      </otherwise>
    </choose>
    &gt; 0
  </select>

  <resultMap extends="BaseResultMap" id="StatisticBaseResultMap" type="com.myfun.houseWeb.app.property.vo.FunKeyStatisticDetailVo">
  </resultMap>
  <select id="getErpFunKeyStatisticDetail" resultMap="StatisticBaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM
    FUN_KEY
    WHERE
    COMP_ID=#{compId} AND
    <choose>
      <when test="param.keyStatus==4">
        KEY_STATUS = 1 AND GETDATE() &gt; MAX_BORROW_TIME
      </when>
      <when test="param.keyStatus==5">
        KEY_STATUS IN(1,2)  AND DEPOSIT_STATUS=3
      </when>
      <otherwise>
        KEY_STATUS = #{param.keyStatus}
      </otherwise>
    </choose>
    AND BORROW_KEY_TIME &gt;= #{param.startDate} AND BORROW_KEY_TIME &lt;= #{param.endDate}
    AND CASE_TYPE=#{param.caseType} AND LOG_TYPE =#{param.logType}
    AND
    <choose>
      <when test="param.groupType==1">
        BUILD_ID =#{param.buildId}
      </when>
      <otherwise>
        USER_ID =#{param.userId}
      </otherwise>
    </choose>
    ORDER BY
    <choose>
      <when test="param.groupType==1">
        BUILD_ID
      </when>
      <otherwise>
        USER_ID
      </otherwise>
    </choose>
    DESC
    OFFSET (#{param.pageOffset}-1) * #{param.pageRows} ROW FETCH NEXT #{param.pageRows} ROWS ONLY
  </select>


  <select id="getKeyBuildInfo" parameterType="java.util.List" resultMap="keyInfoMap">
    select k.KEY_ID, k.CASE_ID,k.CASE_TYPE,k.KEY_ID,s.BUILD_ID,s.BUILD_NAME from fun_key k left JOIN fun_sale s on k.case_id = s.sale_id where k.CASE_TYPE = 1
    <if test="null != idList and idList.size &gt; 0">
      and k.KEY_ID in
      <foreach close=")" collection="idList" index="index" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
    UNION ALL
    select k.KEY_ID, k.CASE_ID,k.CASE_TYPE,k.KEY_ID,l.BUILD_ID,l.BUILD_NAME from fun_key k left join fun_lease l on k.CASE_ID = l.LEASE_ID where k.CASE_TYPE = 2
    <if test="null != idList and idList.size &gt; 0">
      and k.KEY_ID in
      <foreach close=")" collection="idList" index="index" item="item" open="(" separator=",">
        #{item}
      </foreach>
    </if>
  </select>

  <select id="getKeyListForProperty" resultMap="keyInfoMap">
    select * from  (
    select
    k.CASE_ID,k.CASE_TYPE,k.KEY_ID,k.DEPT_ID,k.KEY_NUM,k.KEY_STATUS,k.KEY_DEPT_ID,k.LOG_TYPE,k.UPDATE_TIME,k.DEL_TIME,k.BORROW_KEY_TIME,k.CREATOR_TIME,
    k.CURRENT_DEPOSIT,k.BORROW_PHONE,k.BORROW_USER,k.USER_NAME,	k.MAX_BORROW_TIME,k.DEPOSIT_STATUS, k.KEY_TYPE, k.KEY_COUNT, k.GATHER_TIME, k.LEND_COUNT, k.KEY_PASSWORD, k.USER_ID,
    l.SALE_ROOF HOUSE_ROOF,l.SALE_UNIT HOUSE_UNIT,l.UNIT_FLOOR HOUSE_UNIT_FLOOR,l.SALE_NUM HOUSE_NUM,l.SALE_ROOM HOUSE_ROOM,l.SALE_AREA HOUSE_AREA,
    l.SALE_USEAGE useage , l.TRADE_ADDR , l.SALE_TOTAL_PRICE  HOUSE_TOTAL_PRICE, 0 as PRICE_UNIT,l.SALE_LEASE_ID,l.BUILD_NAME
    from   FUN_KEY k
    join FUN_DEPTS d on k.DEPT_ID = d.DEPT_ID
    <if test="null != keyParam.groupId and '' != keyParam.groupId">
      join FUN_DEPTSGROUP g on g.DEPT_ID = k.DEPT_ID
    </if>
    left join FUN_SALE l on   k.CASE_ID = l.SALE_ID
    <where>
      and  k.CASE_TYPE = 1
      <if test="null != keyParam.keyType">
        and k.KEY_TYPE = #{keyParam.keyType}
      </if>
      <if test="null != keyParam.buildId and '' != keyParam.buildId">
        and k.BUILD_ID = #{keyParam.buildId}
      </if>
      <if test="null != keyParam.search and '' != keyParam.search">
        and (
        k.KEY_NUM like concat('%',#{keyParam.search},'%')
        or
        l.BUILD_NAME like concat('%',#{keyParam.search},'%')
        )
      </if>
      <if test="null != keyParam.deptId and '' != keyParam.deptId">
        and k.DEPT_ID = #{keyParam.deptId}
      </if>
      <if test="null != keyParam.groupId and '' != keyParam.groupId">
        and g.gr_id = #{keyParam.groupId}
      </if>
      <if test="null != keyParam.compId and '' != keyParam.compId">
        and	 k.COMP_ID = #{keyParam.compId}
      </if>
      <if test="null != keyParam.areaId and '' != keyParam.areaId">
        and	 d.AREA_ID = #{keyParam.areaId}
      </if>
      <if test="null != keyParam.regionId and '' != keyParam.regionId">
        and	 d.REG_ID = #{keyParam.regionId}
      </if>
      <if test="null != keyParam.partnerId and '' != keyParam.partnerId">
        and l.PARTNER_ID = #{keyParam.partnerId}
      </if>

      <if test="queryParam != null">
        <choose>
          <when test="keyParam.organizationId != null and keyParam.organizationId != 0">
            and l.TISSUE_LINE like concat('%', #{keyParam.organizationId}, '%')
          </when>
          <otherwise>
            <if test="queryParam.limit and queryParam.queryOrgIds != null and queryParam.queryOrgIds.size() &gt; 0">
              AND l.ORGANIZATION_ID IN
              <foreach close=")" collection="queryParam.queryOrgIds" item="orgId" open="(" separator=",">
                #{orgId}
              </foreach>
            </if>
          </otherwise>
        </choose>
      </if>

      <if test="null != keyParam.userId and '' != keyParam.userId">
        and  k.USER_ID = #{keyParam.userId}
      </if>
      <if test="null != keyParam.buildRoof and '' != keyParam.buildRoof">
        and l.SALE_ROOF = #{keyParam.buildRoof}
      </if>
      <if test="null != keyParam.buildUnit and '' != keyParam.buildUnit">
        and l.SALE_UNIT = #{keyParam.buildUnit}
      </if>
      <if test="null != keyParam.buildFloor and '' != keyParam.buildFloor">
        and  l.UNIT_FLOOR = #{keyParam.buildFloor}
      </if>
      <if test="null != keyParam.buildNum and '' != keyParam.buildNum">
        and l.SALE_NUM = #{keyParam.buildNum}
      </if>
      <if test="null != keyParam.keyStatus and '' != keyParam.keyStatus">
        <choose>
          <when test="keyParam.keyStatus==4">
            and GETDATE() &gt;  k.MAX_BORROW_TIME   and k.KEY_STATUS =1 AND k.LOG_TYPE = 2
          </when>
          <otherwise>
            AND k.KEY_STATUS = #{keyParam.keyStatus}
          </otherwise>
        </choose>
      </if>
      <if test="null != keyParam.keyIds and '' != keyParam.keyIds">
        and k.KEY_ID  not in
        <foreach close=")" collection="keyParam.keyIdList" index="index" item="item" open="(" separator=",">
          #{item}
        </foreach>
      </if>
    </where>

    union all
    select
    k.CASE_ID,k.CASE_TYPE,k.KEY_ID,k.DEPT_ID,k.KEY_NUM,k.KEY_STATUS,k.KEY_DEPT_ID,k.LOG_TYPE,k.UPDATE_TIME,k.DEL_TIME,k.BORROW_KEY_TIME,k.CREATOR_TIME,
    k.CURRENT_DEPOSIT,k.BORROW_PHONE,k.BORROW_USER,k.USER_NAME,	k.MAX_BORROW_TIME,k.DEPOSIT_STATUS, k.KEY_TYPE, k.KEY_COUNT, k.GATHER_TIME, k.LEND_COUNT, k.KEY_PASSWORD,
    l.LEASE_ROOF HOUSE_ROOF,l.LEASE_UNIT HOUSE_UNIT,l.UNIT_FLOOR HOUSE_UNIT_FLOOR,l.LEASE_NUM HOUSE_NUM,l.LEASE_ROOM HOUSE_ROOM,l.LEASE_AREA HOUSE_AREA,
    l.lease_useage useage , l.TRADE_ADDR , l.LEASE_TOTAL_PRICE  HOUSE_TOTAL_PRICE ,l.PRICE_UNIT,l.SALE_LEASE_ID,l.BUILD_NAME
    from FUN_KEY k
    join FUN_DEPTS d on k.DEPT_ID = d.DEPT_ID
    <if test="null != keyParam.groupId and '' != keyParam.groupId">
      join FUN_DEPTSGROUP g on g.DEPT_ID = k.DEPT_ID
    </if>
    left join FUN_LEASE l on k.CASE_ID = l.LEASE_ID
    <where>

      and  k.CASE_TYPE = 2
      <if test="null != keyParam.keyType">
        and k.KEY_TYPE = #{keyParam.keyType}
      </if>
      <if test="null != keyParam.buildId and '' != keyParam.buildId">
        and k.BUILD_ID = #{keyParam.buildId}
      </if>
      <if test="null != keyParam.search and '' != keyParam.search">
        and (
        k.KEY_NUM like concat('%',#{keyParam.search},'%')
        or
        l.BUILD_NAME like concat('%',#{keyParam.search},'%')
        )
      </if>
      <if test="null != keyParam.deptId and '' != keyParam.deptId">
        and k.DEPT_ID = #{keyParam.deptId}
      </if>
      <if test="null != keyParam.groupId and '' != keyParam.groupId">
        and g.gr_id = #{keyParam.groupId}
      </if>
      <if test="null != keyParam.compId and '' != keyParam.compId">
        and	 k.COMP_ID = #{keyParam.compId}
      </if>
      <if test="null != keyParam.areaId and '' != keyParam.areaId">
        and	 d.AREA_ID = #{keyParam.areaId}
      </if>
      <if test="null != keyParam.regionId and '' != keyParam.regionId">
        and	 d.REG_ID = #{keyParam.regionId}
      </if>
      <if test="null != keyParam.partnerId and '' != keyParam.partnerId">
        and l.PARTNER_ID = #{keyParam.partnerId}
      </if>

      <if test="queryParam != null">
        <choose>
          <when test="keyParam.organizationId != null and keyParam.organizationId != 0">
            and l.TISSUE_LINE like concat('%', #{keyParam.organizationId}, '%')
          </when>
          <otherwise>
            <if test="queryParam.limit and queryParam.queryOrgIds != null and queryParam.queryOrgIds.size() &gt; 0">
              AND l.ORGANIZATION_ID IN
              <foreach close=")" collection="queryParam.queryOrgIds" item="orgId" open="(" separator=",">
                #{orgId}
              </foreach>
            </if>
          </otherwise>
        </choose>
      </if>

      <if test="null != keyParam.userId and '' != keyParam.userId">
        and  k.USER_ID = #{keyParam.userId}
      </if>
      <if test="null != keyParam.buildRoof and '' != keyParam.buildRoof">
        and l.LEASE_ROOF = #{keyParam.buildRoof}
      </if>
      <if test="null != keyParam.buildUnit and '' != keyParam.buildUnit">
        and l.LEASE_UNIT = #{keyParam.buildUnit}
      </if>
      <if test="null != keyParam.buildFloor and '' != keyParam.buildFloor">
        and  l.UNIT_FLOOR = #{keyParam.buildFloor}
      </if>
      <if test="null != keyParam.buildNum and '' != keyParam.buildNum">
        and l.LEASE_NUM = #{keyParam.buildNum}
      </if>
      <if test="null != keyParam.keyStatus and '' != keyParam.keyStatus">
        <choose>
          <when test="keyParam.keyStatus==4">
            and GETDATE() &gt;  k.MAX_BORROW_TIME   and k.KEY_STATUS =1 AND k.LOG_TYPE = 2
          </when>
          <otherwise>
            AND k.KEY_STATUS = #{keyParam.keyStatus}
          </otherwise>
        </choose>
      </if>
      <if test="null != keyParam.keyIds and '' != keyParam.keyIds">
        and k.KEY_ID  not in
        <foreach close=")" collection="keyParam.keyIdList" index="index" item="item" open="(" separator=",">
          #{item}
        </foreach>
      </if>

    </where>
    ) a
    ORDER BY ( CASE KEY_STATUS WHEN 0 THEN 5 WHEN 1 THEN ( CASE when(GETDATE()&gt;MAX_BORROW_TIME)then 0 ELSE 1 end) WHEN 2 THEN 3 WHEN 3 THEN 4 END ) ASC ,
    CREATOR_TIME  desc
  </select>

  <select id="getKeyListForApp" resultMap="keyInfoMap">
    select * from  (
    select
    k.CASE_ID,k.CASE_TYPE,k.KEY_ID,k.DEPT_ID,k.KEY_NUM,k.KEY_STATUS,k.KEY_DEPT_ID,k.LOG_TYPE,k.UPDATE_TIME,k.DEL_TIME,k.BORROW_KEY_TIME,k.CREATOR_TIME,
    k.CURRENT_DEPOSIT,k.BORROW_PHONE,k.BORROW_USER,k.USER_NAME,	k.MAX_BORROW_TIME,k.DEPOSIT_STATUS, k.KEY_TYPE, k.KEY_COUNT, k.GATHER_TIME, k.LEND_COUNT, k.KEY_PASSWORD, k.USER_ID,
    l.SALE_ROOF HOUSE_ROOF,l.SALE_UNIT HOUSE_UNIT,l.UNIT_FLOOR HOUSE_UNIT_FLOOR,l.SALE_NUM HOUSE_NUM,l.SALE_ROOM HOUSE_ROOM,l.SALE_AREA HOUSE_AREA,
    l.SALE_USEAGE useage , l.TRADE_ADDR , l.SALE_TOTAL_PRICE  HOUSE_TOTAL_PRICE, 0 as PRICE_UNIT,l.SALE_LEASE_ID,l.BUILD_NAME
    from   FUN_KEY k
    left join FUN_SALE l on   k.CASE_ID = l.SALE_ID
    <where>
      and  k.CASE_TYPE = 1
      <if test="null != keyParam.keyType">
        and k.KEY_TYPE = #{keyParam.keyType}
      </if>
      <if test="null != keyParam.buildId and '' != keyParam.buildId">
        and l.BUILD_ID = #{keyParam.buildId}
      </if>
      <if test="null != keyParam.search and '' != keyParam.search">
        and (
        k.KEY_NUM like concat('%',#{keyParam.search},'%')
        or
        l.BUILD_NAME like concat('%',#{keyParam.search},'%')
        )
      </if>
      <if test="null != keyParam.deptId and '' != keyParam.deptId">
        and l.DEPT_ID = #{keyParam.deptId}
      </if>
      <if test="null != keyParam.groupId and '' != keyParam.groupId">
        and l.gr_id = #{keyParam.groupId}
      </if>
      <if test="null != keyParam.compId and '' != keyParam.compId">
        and	 l.COMP_ID = #{keyParam.compId}
      </if>
      <if test="null != keyParam.areaId and '' != keyParam.areaId">
        and	 l.AREA_ID = #{keyParam.areaId}
      </if>
      <if test="null != keyParam.regionId and '' != keyParam.regionId">
        and	 l.REG_ID = #{keyParam.regionId}
      </if>
      <if test="null != keyParam.partnerId and '' != keyParam.partnerId">
        and l.PARTNER_ID = #{keyParam.partnerId}
      </if>

      <if test="queryParam != null">
        <choose>
          <when test="keyParam.organizationId != null and keyParam.organizationId != 0">
            and l.TISSUE_LINE like concat('%', #{keyParam.organizationId}, '%')
          </when>
          <otherwise>
            <if test="queryParam.limit and queryParam.queryOrgIds != null and queryParam.queryOrgIds.size() &gt; 0">
              AND l.ORGANIZATION_ID IN
              <foreach close=")" collection="queryParam.queryOrgIds" item="orgId" open="(" separator=",">
                #{orgId}
              </foreach>
            </if>
          </otherwise>
        </choose>
      </if>

      <if test="null != keyParam.userId and '' != keyParam.userId">
        and  l.USER_ID = #{keyParam.userId}
      </if>
      <if test="null != keyParam.buildRoof and '' != keyParam.buildRoof">
        and l.SALE_ROOF = #{keyParam.buildRoof}
      </if>
      <if test="null != keyParam.buildUnit and '' != keyParam.buildUnit">
        and l.SALE_UNIT = #{keyParam.buildUnit}
      </if>
      <if test="null != keyParam.buildFloor and '' != keyParam.buildFloor">
        and  l.UNIT_FLOOR = #{keyParam.buildFloor}
      </if>
      <if test="null != keyParam.buildNum and '' != keyParam.buildNum">
        and l.SALE_NUM = #{keyParam.buildNum}
      </if>
      <if test="null != keyParam.keyStatus and '' != keyParam.keyStatus">
        <choose>
          <when test="keyParam.keyStatus==4">
            and GETDATE() &gt;  k.MAX_BORROW_TIME   and k.KEY_STATUS =1 AND k.LOG_TYPE = 2
          </when>
          <otherwise>
            AND k.KEY_STATUS = #{keyParam.keyStatus}
          </otherwise>
        </choose>
      </if>
      <if test="null != keyParam.keyIds and '' != keyParam.keyIds">
        and k.KEY_ID  not in
        <foreach close=")" collection="keyParam.keyIdList" index="index" item="item" open="(" separator=",">
          #{item}
        </foreach>
      </if>
    </where>
    union all
    select
    k.CASE_ID,k.CASE_TYPE,k.KEY_ID,k.DEPT_ID,k.KEY_NUM,k.KEY_STATUS,k.KEY_DEPT_ID,k.LOG_TYPE,k.UPDATE_TIME,k.DEL_TIME,k.BORROW_KEY_TIME,k.CREATOR_TIME,
    k.CURRENT_DEPOSIT,k.BORROW_PHONE,k.BORROW_USER,k.USER_NAME,	k.MAX_BORROW_TIME,k.DEPOSIT_STATUS, k.KEY_TYPE, k.KEY_COUNT, k.GATHER_TIME, k.LEND_COUNT, k.KEY_PASSWORD, k.USER_ID,
    l.LEASE_ROOF HOUSE_ROOF,l.LEASE_UNIT HOUSE_UNIT,l.UNIT_FLOOR HOUSE_UNIT_FLOOR,l.LEASE_NUM HOUSE_NUM,l.LEASE_ROOM HOUSE_ROOM,l.LEASE_AREA HOUSE_AREA,
    l.lease_useage useage , l.TRADE_ADDR , l.LEASE_TOTAL_PRICE  HOUSE_TOTAL_PRICE ,l.PRICE_UNIT,l.SALE_LEASE_ID,l.BUILD_NAME
    from FUN_KEY k
    left join FUN_LEASE l on k.CASE_ID = l.LEASE_ID
    <where>
      and  k.CASE_TYPE = 2
      <if test="null != keyParam.keyType">
        and k.KEY_TYPE = #{keyParam.keyType}
      </if>
      <if test="null != keyParam.buildId and '' != keyParam.buildId">
        and l.BUILD_ID = #{keyParam.buildId}
      </if>
      <if test="null != keyParam.search and '' != keyParam.search">
        and (
        k.KEY_NUM like concat('%',#{keyParam.search},'%')
        or
        l.BUILD_NAME like concat('%',#{keyParam.search},'%')
        )
      </if>
      <if test="null != keyParam.deptId and '' != keyParam.deptId">
        and l.DEPT_ID = #{keyParam.deptId}
      </if>
      <if test="null != keyParam.groupId and '' != keyParam.groupId">
        and l.gr_id = #{keyParam.groupId}
      </if>
      <if test="null != keyParam.compId and '' != keyParam.compId">
        and	 l.COMP_ID = #{keyParam.compId}
      </if>
      <if test="null != keyParam.areaId and '' != keyParam.areaId">
        and	 l.AREA_ID = #{keyParam.areaId}
      </if>
      <if test="null != keyParam.regionId and '' != keyParam.regionId">
        and	 l.REG_ID = #{keyParam.regionId}
      </if>
      <if test="null != keyParam.partnerId and '' != keyParam.partnerId">
        and l.PARTNER_ID = #{keyParam.partnerId}
      </if>

      <if test="queryParam != null">
        <choose>
          <when test="keyParam.organizationId != null and keyParam.organizationId != 0">
            and l.TISSUE_LINE like concat('%', #{keyParam.organizationId}, '%')
          </when>
          <otherwise>
            <if test="queryParam.limit and queryParam.queryOrgIds != null and queryParam.queryOrgIds.size() &gt; 0">
              AND l.ORGANIZATION_ID IN
              <foreach close=")" collection="queryParam.queryOrgIds" item="orgId" open="(" separator=",">
                #{orgId}
              </foreach>
            </if>
          </otherwise>
        </choose>
      </if>

      <if test="null != keyParam.userId and '' != keyParam.userId">
        and  l.USER_ID = #{keyParam.userId}
      </if>
      <if test="null != keyParam.buildRoof and '' != keyParam.buildRoof">
        and l.LEASE_ROOF = #{keyParam.buildRoof}
      </if>
      <if test="null != keyParam.buildUnit and '' != keyParam.buildUnit">
        and l.LEASE_UNIT = #{keyParam.buildUnit}
      </if>
      <if test="null != keyParam.buildFloor and '' != keyParam.buildFloor">
        and  l.UNIT_FLOOR = #{keyParam.buildFloor}
      </if>
      <if test="null != keyParam.buildNum and '' != keyParam.buildNum">
        and l.LEASE_NUM = #{keyParam.buildNum}
      </if>
      <if test="null != keyParam.keyStatus and '' != keyParam.keyStatus">
        <choose>
          <when test="keyParam.keyStatus==4">
            and GETDATE() &gt;  k.MAX_BORROW_TIME   and k.KEY_STATUS =1 AND k.LOG_TYPE = 2
          </when>
          <otherwise>
            AND k.KEY_STATUS = #{keyParam.keyStatus}
          </otherwise>
        </choose>
      </if>
      <if test="null != keyParam.keyIds and '' != keyParam.keyIds">
        and k.KEY_ID  not in
        <foreach close=")" collection="keyParam.keyIdList" index="index" item="item" open="(" separator=",">
          #{item}
        </foreach>
      </if>
    </where>
    ) a
    ORDER BY ( CASE KEY_STATUS WHEN 0 THEN 5 WHEN 1 THEN ( CASE when(GETDATE()&gt;MAX_BORROW_TIME)then 0 ELSE 1 end) WHEN 2 THEN 3 WHEN 3 THEN 4 END ) ASC ,
    CREATOR_TIME  desc
  </select>
</mapper>